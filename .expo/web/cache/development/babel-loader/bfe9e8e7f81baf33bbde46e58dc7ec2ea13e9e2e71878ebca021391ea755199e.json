{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport axios from 'axios';\nimport { getSlapCount, setSlapCount, getLastSyncTime, setLastSyncTime } from \"./storage\";\nvar GOOGLE_SHEETS_CONFIG = {\n  SHEET_ID: 'YOUR_GOOGLE_SHEET_ID',\n  API_KEY: 'YOUR_GOOGLE_API_KEY',\n  RANGE: 'Sheet1!A1:B2'\n};\nvar getSheetUrl = function getSheetUrl() {\n  return `https://sheets.googleapis.com/v4/spreadsheets/${GOOGLE_SHEETS_CONFIG.SHEET_ID}/values/${GOOGLE_SHEETS_CONFIG.RANGE}?key=${GOOGLE_SHEETS_CONFIG.API_KEY}`;\n};\nvar updateSheetUrl = function updateSheetUrl() {\n  return `https://sheets.googleapis.com/v4/spreadsheets/${GOOGLE_SHEETS_CONFIG.SHEET_ID}/values/${GOOGLE_SHEETS_CONFIG.RANGE}?valueInputOption=RAW&key=${GOOGLE_SHEETS_CONFIG.API_KEY}`;\n};\nexport var syncSlapCountToSheet = function () {\n  var _ref = _asyncToGenerator(function* (count) {\n    try {\n      var timestamp = new Date().toISOString();\n      var data = {\n        values: [['Slap Count', 'Last Updated'], [count.toString(), timestamp]]\n      };\n      var response = yield axios.put(updateSheetUrl(), data, {\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      });\n      if (response.status === 200) {\n        yield setLastSyncTime(timestamp);\n        console.log('Slap count synced to Google Sheets:', count);\n        return true;\n      }\n      return false;\n    } catch (error) {\n      console.error('Error syncing to Google Sheets:', error);\n      return false;\n    }\n  });\n  return function syncSlapCountToSheet(_x) {\n    return _ref.apply(this, arguments);\n  };\n}();\nexport var getSlapCountFromSheet = function () {\n  var _ref2 = _asyncToGenerator(function* () {\n    try {\n      var response = yield axios.get(getSheetUrl());\n      if (response.status === 200 && response.data.values) {\n        var values = response.data.values;\n        if (values.length > 1 && values[1][0]) {\n          var count = parseInt(values[1][0], 10);\n          return isNaN(count) ? 0 : count;\n        }\n      }\n      return 0;\n    } catch (error) {\n      console.error('Error getting slap count from Google Sheets:', error);\n      return null;\n    }\n  });\n  return function getSlapCountFromSheet() {\n    return _ref2.apply(this, arguments);\n  };\n}();\nexport var syncSlapCount = function () {\n  var _ref3 = _asyncToGenerator(function* () {\n    try {\n      var localCount = yield getSlapCount();\n      var remoteCount = yield getSlapCountFromSheet();\n      if (remoteCount === null) {\n        return localCount;\n      }\n      var finalCount = Math.max(localCount, remoteCount);\n      if (finalCount !== localCount) {\n        yield setSlapCount(finalCount);\n      }\n      if (finalCount !== remoteCount) {\n        yield syncSlapCountToSheet(finalCount);\n      }\n      return finalCount;\n    } catch (error) {\n      console.error('Error syncing slap count:', error);\n      return yield getSlapCount();\n    }\n  });\n  return function syncSlapCount() {\n    return _ref3.apply(this, arguments);\n  };\n}();\nexport var incrementAndSyncSlapCount = function () {\n  var _ref4 = _asyncToGenerator(function* () {\n    try {\n      var currentCount = yield getSlapCount();\n      var newCount = currentCount + 1;\n      yield setSlapCount(newCount);\n      syncSlapCountToSheet(newCount).catch(function (error) {\n        console.log('Background sync failed, will retry later:', error);\n      });\n      return newCount;\n    } catch (error) {\n      console.error('Error incrementing slap count:', error);\n      return yield getSlapCount();\n    }\n  });\n  return function incrementAndSyncSlapCount() {\n    return _ref4.apply(this, arguments);\n  };\n}();\nexport var testGoogleSheetsConnection = function () {\n  var _ref5 = _asyncToGenerator(function* () {\n    try {\n      var response = yield axios.get(getSheetUrl());\n      return response.status === 200;\n    } catch (error) {\n      console.error('Google Sheets connection test failed:', error);\n      return false;\n    }\n  });\n  return function testGoogleSheetsConnection() {\n    return _ref5.apply(this, arguments);\n  };\n}();\nexport var getSetupInstructions = function getSetupInstructions() {\n  return `\nTo set up Google Sheets sync for the slap counter:\n\n1. Create a new Google Sheet\n2. In cell A1, put \"Slap Count\"\n3. In cell B1, put \"Last Updated\"\n4. In cell A2, put \"0\" (initial count)\n5. In cell B2, put current date/time\n\n6. Get the Sheet ID from the URL:\n   https://docs.google.com/spreadsheets/d/[SHEET_ID]/edit\n\n7. Enable Google Sheets API in Google Cloud Console\n8. Create an API key with Sheets API access\n9. Make the sheet publicly readable or share with service account\n\n10. Update GOOGLE_SHEETS_CONFIG in googleSheets.js:\n    - SHEET_ID: Your sheet ID\n    - API_KEY: Your API key\n    - RANGE: Adjust if needed (default: Sheet1!A1:B2)\n\nThe app will work offline and sync when online!\n  `;\n};","map":{"version":3,"names":["axios","getSlapCount","setSlapCount","getLastSyncTime","setLastSyncTime","GOOGLE_SHEETS_CONFIG","SHEET_ID","API_KEY","RANGE","getSheetUrl","updateSheetUrl","syncSlapCountToSheet","_ref","_asyncToGenerator","count","timestamp","Date","toISOString","data","values","toString","response","put","headers","status","console","log","error","_x","apply","arguments","getSlapCountFromSheet","_ref2","get","length","parseInt","isNaN","syncSlapCount","_ref3","localCount","remoteCount","finalCount","Math","max","incrementAndSyncSlapCount","_ref4","currentCount","newCount","catch","testGoogleSheetsConnection","_ref5","getSetupInstructions"],"sources":["C:/study/github/projects/bubu/src/services/googleSheets.js"],"sourcesContent":["import axios from 'axios';\r\nimport { getSlapCount, setSlapCount, getLastSyncTime, setLastSyncTime } from './storage';\r\n\r\n// Google Sheets configuration\r\nconst GOOGLE_SHEETS_CONFIG = {\r\n  // Replace with your Google Sheets API details\r\n  SHEET_ID: 'YOUR_GOOGLE_SHEET_ID',\r\n  API_KEY: 'YOUR_GOOGLE_API_KEY',\r\n  RANGE: 'Sheet1!A1:B2', // Adjust range as needed\r\n};\r\n\r\n// Google Sheets API URL\r\nconst getSheetUrl = () => {\r\n  return `https://sheets.googleapis.com/v4/spreadsheets/${GOOGLE_SHEETS_CONFIG.SHEET_ID}/values/${GOOGLE_SHEETS_CONFIG.RANGE}?key=${GOOGLE_SHEETS_CONFIG.API_KEY}`;\r\n};\r\n\r\nconst updateSheetUrl = () => {\r\n  return `https://sheets.googleapis.com/v4/spreadsheets/${GOOGLE_SHEETS_CONFIG.SHEET_ID}/values/${GOOGLE_SHEETS_CONFIG.RANGE}?valueInputOption=RAW&key=${GOOGLE_SHEETS_CONFIG.API_KEY}`;\r\n};\r\n\r\n// Sync slap count to Google Sheets\r\nexport const syncSlapCountToSheet = async (count) => {\r\n  try {\r\n    const timestamp = new Date().toISOString();\r\n    const data = {\r\n      values: [\r\n        ['Slap Count', 'Last Updated'],\r\n        [count.toString(), timestamp]\r\n      ]\r\n    };\r\n\r\n    const response = await axios.put(updateSheetUrl(), data, {\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n    });\r\n\r\n    if (response.status === 200) {\r\n      await setLastSyncTime(timestamp);\r\n      console.log('Slap count synced to Google Sheets:', count);\r\n      return true;\r\n    }\r\n    return false;\r\n  } catch (error) {\r\n    console.error('Error syncing to Google Sheets:', error);\r\n    return false;\r\n  }\r\n};\r\n\r\n// Get slap count from Google Sheets\r\nexport const getSlapCountFromSheet = async () => {\r\n  try {\r\n    const response = await axios.get(getSheetUrl());\r\n    \r\n    if (response.status === 200 && response.data.values) {\r\n      const values = response.data.values;\r\n      if (values.length > 1 && values[1][0]) {\r\n        const count = parseInt(values[1][0], 10);\r\n        return isNaN(count) ? 0 : count;\r\n      }\r\n    }\r\n    return 0;\r\n  } catch (error) {\r\n    console.error('Error getting slap count from Google Sheets:', error);\r\n    return null;\r\n  }\r\n};\r\n\r\n// Sync slap count (bidirectional)\r\nexport const syncSlapCount = async () => {\r\n  try {\r\n    const localCount = await getSlapCount();\r\n    const remoteCount = await getSlapCountFromSheet();\r\n    \r\n    if (remoteCount === null) {\r\n      // Can't connect to sheets, use local count\r\n      return localCount;\r\n    }\r\n    \r\n    // Use the higher count (in case of offline increments)\r\n    const finalCount = Math.max(localCount, remoteCount);\r\n    \r\n    // Update both local and remote if needed\r\n    if (finalCount !== localCount) {\r\n      await setSlapCount(finalCount);\r\n    }\r\n    \r\n    if (finalCount !== remoteCount) {\r\n      await syncSlapCountToSheet(finalCount);\r\n    }\r\n    \r\n    return finalCount;\r\n  } catch (error) {\r\n    console.error('Error syncing slap count:', error);\r\n    // Return local count as fallback\r\n    return await getSlapCount();\r\n  }\r\n};\r\n\r\n// Increment slap count and sync\r\nexport const incrementAndSyncSlapCount = async () => {\r\n  try {\r\n    // Get current local count\r\n    const currentCount = await getSlapCount();\r\n    const newCount = currentCount + 1;\r\n    \r\n    // Update local storage immediately\r\n    await setSlapCount(newCount);\r\n    \r\n    // Try to sync to Google Sheets (don't wait for it)\r\n    syncSlapCountToSheet(newCount).catch(error => {\r\n      console.log('Background sync failed, will retry later:', error);\r\n    });\r\n    \r\n    return newCount;\r\n  } catch (error) {\r\n    console.error('Error incrementing slap count:', error);\r\n    return await getSlapCount();\r\n  }\r\n};\r\n\r\n// Check if we can connect to Google Sheets\r\nexport const testGoogleSheetsConnection = async () => {\r\n  try {\r\n    const response = await axios.get(getSheetUrl());\r\n    return response.status === 200;\r\n  } catch (error) {\r\n    console.error('Google Sheets connection test failed:', error);\r\n    return false;\r\n  }\r\n};\r\n\r\n// Setup instructions for Google Sheets\r\nexport const getSetupInstructions = () => {\r\n  return `\r\nTo set up Google Sheets sync for the slap counter:\r\n\r\n1. Create a new Google Sheet\r\n2. In cell A1, put \"Slap Count\"\r\n3. In cell B1, put \"Last Updated\"\r\n4. In cell A2, put \"0\" (initial count)\r\n5. In cell B2, put current date/time\r\n\r\n6. Get the Sheet ID from the URL:\r\n   https://docs.google.com/spreadsheets/d/[SHEET_ID]/edit\r\n\r\n7. Enable Google Sheets API in Google Cloud Console\r\n8. Create an API key with Sheets API access\r\n9. Make the sheet publicly readable or share with service account\r\n\r\n10. Update GOOGLE_SHEETS_CONFIG in googleSheets.js:\r\n    - SHEET_ID: Your sheet ID\r\n    - API_KEY: Your API key\r\n    - RANGE: Adjust if needed (default: Sheet1!A1:B2)\r\n\r\nThe app will work offline and sync when online!\r\n  `;\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}