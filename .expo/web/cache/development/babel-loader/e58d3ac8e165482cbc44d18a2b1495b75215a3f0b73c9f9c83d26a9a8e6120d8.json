{"ast":null,"code":"import * as SQLite from 'expo-sqlite';\nvar db = SQLite.openDatabase('bubu.db');\nexport var initializeDatabase = function initializeDatabase() {\n  return new Promise(function (resolve, reject) {\n    db.transaction(function (tx) {\n      tx.executeSql(`CREATE TABLE IF NOT EXISTS diary_entries (\n            id INTEGER PRIMARY KEY AUTOINCREMENT,\n            title TEXT NOT NULL,\n            content TEXT NOT NULL,\n            date TEXT NOT NULL,\n            created_at DATETIME DEFAULT CURRENT_TIMESTAMP\n          );`);\n      tx.executeSql(`CREATE TABLE IF NOT EXISTS poems (\n            id INTEGER PRIMARY KEY AUTOINCREMENT,\n            title TEXT NOT NULL,\n            content TEXT NOT NULL,\n            category TEXT,\n            created_at DATETIME DEFAULT CURRENT_TIMESTAMP\n          );`);\n      tx.executeSql(`CREATE TABLE IF NOT EXISTS period_data (\n            id INTEGER PRIMARY KEY AUTOINCREMENT,\n            date TEXT NOT NULL UNIQUE,\n            type TEXT NOT NULL,\n            notes TEXT,\n            created_at DATETIME DEFAULT CURRENT_TIMESTAMP\n          );`);\n      tx.executeSql(`CREATE TABLE IF NOT EXISTS app_settings (\n            key TEXT PRIMARY KEY,\n            value TEXT NOT NULL,\n            updated_at DATETIME DEFAULT CURRENT_TIMESTAMP\n          );`);\n      console.log('Database initialized successfully');\n    }, function (error) {\n      console.error('Database initialization error:', error);\n      reject(error);\n    }, function () {\n      resolve();\n    });\n  });\n};\nexport var getDiaryEntries = function getDiaryEntries() {\n  return new Promise(function (resolve, reject) {\n    db.transaction(function (tx) {\n      tx.executeSql('SELECT * FROM diary_entries ORDER BY date DESC', [], function (_, _ref) {\n        var rows = _ref.rows;\n        return resolve(rows._array);\n      }, function (_, error) {\n        return reject(error);\n      });\n    });\n  });\n};\nexport var addDiaryEntry = function addDiaryEntry(title, content, date) {\n  return new Promise(function (resolve, reject) {\n    db.transaction(function (tx) {\n      tx.executeSql('INSERT INTO diary_entries (title, content, date) VALUES (?, ?, ?)', [title, content, date], function (_, result) {\n        return resolve(result.insertId);\n      }, function (_, error) {\n        return reject(error);\n      });\n    });\n  });\n};\nexport var getPoems = function getPoems() {\n  return new Promise(function (resolve, reject) {\n    db.transaction(function (tx) {\n      tx.executeSql('SELECT * FROM poems ORDER BY created_at DESC', [], function (_, _ref2) {\n        var rows = _ref2.rows;\n        return resolve(rows._array);\n      }, function (_, error) {\n        return reject(error);\n      });\n    });\n  });\n};\nexport var addPoem = function addPoem(title, content) {\n  var category = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n  return new Promise(function (resolve, reject) {\n    db.transaction(function (tx) {\n      tx.executeSql('INSERT INTO poems (title, content, category) VALUES (?, ?, ?)', [title, content, category], function (_, result) {\n        return resolve(result.insertId);\n      }, function (_, error) {\n        return reject(error);\n      });\n    });\n  });\n};\nexport var getPeriodData = function getPeriodData() {\n  return new Promise(function (resolve, reject) {\n    db.transaction(function (tx) {\n      tx.executeSql('SELECT * FROM period_data ORDER BY date ASC', [], function (_, _ref3) {\n        var rows = _ref3.rows;\n        return resolve(rows._array);\n      }, function (_, error) {\n        return reject(error);\n      });\n    });\n  });\n};\nexport var addPeriodData = function addPeriodData(date, type) {\n  var notes = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n  return new Promise(function (resolve, reject) {\n    db.transaction(function (tx) {\n      tx.executeSql('INSERT OR REPLACE INTO period_data (date, type, notes) VALUES (?, ?, ?)', [date, type, notes], function (_, result) {\n        return resolve(result.insertId);\n      }, function (_, error) {\n        return reject(error);\n      });\n    });\n  });\n};\nexport var getSetting = function getSetting(key) {\n  return new Promise(function (resolve, reject) {\n    db.transaction(function (tx) {\n      tx.executeSql('SELECT value FROM app_settings WHERE key = ?', [key], function (_, _ref4) {\n        var rows = _ref4.rows;\n        if (rows.length > 0) {\n          resolve(rows._array[0].value);\n        } else {\n          resolve(null);\n        }\n      }, function (_, error) {\n        return reject(error);\n      });\n    });\n  });\n};\nexport var setSetting = function setSetting(key, value) {\n  return new Promise(function (resolve, reject) {\n    db.transaction(function (tx) {\n      tx.executeSql('INSERT OR REPLACE INTO app_settings (key, value) VALUES (?, ?)', [key, value], function (_, result) {\n        return resolve(result);\n      }, function (_, error) {\n        return reject(error);\n      });\n    });\n  });\n};","map":{"version":3,"names":["SQLite","db","openDatabase","initializeDatabase","Promise","resolve","reject","transaction","tx","executeSql","console","log","error","getDiaryEntries","_","_ref","rows","_array","addDiaryEntry","title","content","date","result","insertId","getPoems","_ref2","addPoem","category","arguments","length","undefined","getPeriodData","_ref3","addPeriodData","type","notes","getSetting","key","_ref4","value","setSetting"],"sources":["C:/study/github/projects/bubu/src/services/database.js"],"sourcesContent":["import * as SQLite from 'expo-sqlite';\r\n\r\nconst db = SQLite.openDatabase('bubu.db');\r\n\r\nexport const initializeDatabase = () => {\r\n  return new Promise((resolve, reject) => {\r\n    db.transaction(\r\n      (tx) => {\r\n        // Diary entries table\r\n        tx.executeSql(\r\n          `CREATE TABLE IF NOT EXISTS diary_entries (\r\n            id INTEGER PRIMARY KEY AUTOINCREMENT,\r\n            title TEXT NOT NULL,\r\n            content TEXT NOT NULL,\r\n            date TEXT NOT NULL,\r\n            created_at DATETIME DEFAULT CURRENT_TIMESTAMP\r\n          );`\r\n        );\r\n\r\n        // Poems table\r\n        tx.executeSql(\r\n          `CREATE TABLE IF NOT EXISTS poems (\r\n            id INTEGER PRIMARY KEY AUTOINCREMENT,\r\n            title TEXT NOT NULL,\r\n            content TEXT NOT NULL,\r\n            category TEXT,\r\n            created_at DATETIME DEFAULT CURRENT_TIMESTAMP\r\n          );`\r\n        );\r\n\r\n        // Period tracking table\r\n        tx.executeSql(\r\n          `CREATE TABLE IF NOT EXISTS period_data (\r\n            id INTEGER PRIMARY KEY AUTOINCREMENT,\r\n            date TEXT NOT NULL UNIQUE,\r\n            type TEXT NOT NULL,\r\n            notes TEXT,\r\n            created_at DATETIME DEFAULT CURRENT_TIMESTAMP\r\n          );`\r\n        );\r\n\r\n        // App settings table\r\n        tx.executeSql(\r\n          `CREATE TABLE IF NOT EXISTS app_settings (\r\n            key TEXT PRIMARY KEY,\r\n            value TEXT NOT NULL,\r\n            updated_at DATETIME DEFAULT CURRENT_TIMESTAMP\r\n          );`\r\n        );\r\n\r\n        console.log('Database initialized successfully');\r\n      },\r\n      (error) => {\r\n        console.error('Database initialization error:', error);\r\n        reject(error);\r\n      },\r\n      () => {\r\n        resolve();\r\n      }\r\n    );\r\n  });\r\n};\r\n\r\n// Diary functions\r\nexport const getDiaryEntries = () => {\r\n  return new Promise((resolve, reject) => {\r\n    db.transaction((tx) => {\r\n      tx.executeSql(\r\n        'SELECT * FROM diary_entries ORDER BY date DESC',\r\n        [],\r\n        (_, { rows }) => resolve(rows._array),\r\n        (_, error) => reject(error)\r\n      );\r\n    });\r\n  });\r\n};\r\n\r\nexport const addDiaryEntry = (title, content, date) => {\r\n  return new Promise((resolve, reject) => {\r\n    db.transaction((tx) => {\r\n      tx.executeSql(\r\n        'INSERT INTO diary_entries (title, content, date) VALUES (?, ?, ?)',\r\n        [title, content, date],\r\n        (_, result) => resolve(result.insertId),\r\n        (_, error) => reject(error)\r\n      );\r\n    });\r\n  });\r\n};\r\n\r\n// Poems functions\r\nexport const getPoems = () => {\r\n  return new Promise((resolve, reject) => {\r\n    db.transaction((tx) => {\r\n      tx.executeSql(\r\n        'SELECT * FROM poems ORDER BY created_at DESC',\r\n        [],\r\n        (_, { rows }) => resolve(rows._array),\r\n        (_, error) => reject(error)\r\n      );\r\n    });\r\n  });\r\n};\r\n\r\nexport const addPoem = (title, content, category = null) => {\r\n  return new Promise((resolve, reject) => {\r\n    db.transaction((tx) => {\r\n      tx.executeSql(\r\n        'INSERT INTO poems (title, content, category) VALUES (?, ?, ?)',\r\n        [title, content, category],\r\n        (_, result) => resolve(result.insertId),\r\n        (_, error) => reject(error)\r\n      );\r\n    });\r\n  });\r\n};\r\n\r\n// Period tracking functions\r\nexport const getPeriodData = () => {\r\n  return new Promise((resolve, reject) => {\r\n    db.transaction((tx) => {\r\n      tx.executeSql(\r\n        'SELECT * FROM period_data ORDER BY date ASC',\r\n        [],\r\n        (_, { rows }) => resolve(rows._array),\r\n        (_, error) => reject(error)\r\n      );\r\n    });\r\n  });\r\n};\r\n\r\nexport const addPeriodData = (date, type, notes = null) => {\r\n  return new Promise((resolve, reject) => {\r\n    db.transaction((tx) => {\r\n      tx.executeSql(\r\n        'INSERT OR REPLACE INTO period_data (date, type, notes) VALUES (?, ?, ?)',\r\n        [date, type, notes],\r\n        (_, result) => resolve(result.insertId),\r\n        (_, error) => reject(error)\r\n      );\r\n    });\r\n  });\r\n};\r\n\r\n// Settings functions\r\nexport const getSetting = (key) => {\r\n  return new Promise((resolve, reject) => {\r\n    db.transaction((tx) => {\r\n      tx.executeSql(\r\n        'SELECT value FROM app_settings WHERE key = ?',\r\n        [key],\r\n        (_, { rows }) => {\r\n          if (rows.length > 0) {\r\n            resolve(rows._array[0].value);\r\n          } else {\r\n            resolve(null);\r\n          }\r\n        },\r\n        (_, error) => reject(error)\r\n      );\r\n    });\r\n  });\r\n};\r\n\r\nexport const setSetting = (key, value) => {\r\n  return new Promise((resolve, reject) => {\r\n    db.transaction((tx) => {\r\n      tx.executeSql(\r\n        'INSERT OR REPLACE INTO app_settings (key, value) VALUES (?, ?)',\r\n        [key, value],\r\n        (_, result) => resolve(result),\r\n        (_, error) => reject(error)\r\n      );\r\n    });\r\n  });\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}