{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport { addDiaryEntry, addPoem, getDiaryEntries, getPoems } from \"./database\";\nvar diaryContent = {\n  '2024-01-15': `The Day I Met You 💕\nToday I want to tell you about the first time I saw you. Your smile lit up the entire room, and I knew in that moment that my life was about to change forever. You were wearing that beautiful dress, and when you laughed, it was like music to my ears. I was so nervous to talk to you, but somehow you made everything feel so natural and easy. That was the beginning of our beautiful story together.`,\n  '2024-02-14': `Valentine's Day Magic ❤️\nToday is our first Valentine's Day together, and I can't believe how lucky I am. Every moment with you feels like a dream come true. The way you look at me, the way you laugh at my silly jokes, the way you make even the simplest moments feel extraordinary. I love how we can talk for hours about everything and nothing. You make my heart skip a beat every single day.`\n};\nvar poemContent = {\n  'my-hearts-song': `My Heart's Song\nLove\nIn your eyes I see the stars,\nIn your smile, the morning sun,\nEvery moment that we share,\nShows me how our hearts are one.\n\nYour laughter fills the empty spaces,\nYour touch heals every scar,\nIn this world of endless faces,\nYou're my wish upon a star.\n\nForever yours, forever true,\nMy heart beats just for you.`,\n  'beautiful-you': `Beautiful You\nBeauty\nBeautiful in the morning light,\nBeautiful when you sleep at night,\nBeautiful when you're laughing loud,\nBeautiful in any crowd.\n\nBeautiful when you're being silly,\nBeautiful when the day is chilly,\nBeautiful in your favorite dress,\nBeautiful in your sweet caress.\n\nEvery day I fall anew,\nFor beautiful, wonderful you.`\n};\nvar parseDiaryEntry = function parseDiaryEntry(content, date) {\n  var lines = content.split('\\n');\n  var title = lines[0].trim();\n  var body = lines.slice(1).join('\\n').trim();\n  return {\n    title: title,\n    content: body,\n    date: date\n  };\n};\nvar parsePoem = function parsePoem(content) {\n  var lines = content.split('\\n');\n  var title = lines[0].trim();\n  var category = lines[1].trim();\n  var body = lines.slice(2).join('\\n').trim();\n  return {\n    title: title,\n    category: category,\n    content: body\n  };\n};\nexport var loadDiaryFromFiles = function () {\n  var _ref = _asyncToGenerator(function* () {\n    try {\n      console.log('Loading diary entries from content...');\n      var _loop = function* _loop() {\n        var entry = parseDiaryEntry(content, dateKey);\n        var existingEntries = yield getDiaryEntries();\n        var exists = existingEntries.some(function (e) {\n          return e.date === entry.date && e.title === entry.title;\n        });\n        if (!exists) {\n          yield addDiaryEntry(entry.title, entry.content, entry.date);\n          console.log(`Added diary entry: ${entry.title}`);\n        }\n      };\n      for (var _ref2 of Object.entries(diaryContent)) {\n        var _ref3 = _slicedToArray(_ref2, 2);\n        var dateKey = _ref3[0];\n        var content = _ref3[1];\n        yield* _loop();\n      }\n      console.log('Diary entries loaded successfully!');\n    } catch (error) {\n      console.error('Error loading diary entries:', error);\n    }\n  });\n  return function loadDiaryFromFiles() {\n    return _ref.apply(this, arguments);\n  };\n}();\nexport var loadPoemsFromFiles = function () {\n  var _ref4 = _asyncToGenerator(function* () {\n    try {\n      console.log('Loading poems from content...');\n      var _loop2 = function* _loop2() {\n        var poem = parsePoem(content);\n        var existingPoems = yield getPoems();\n        var exists = existingPoems.some(function (p) {\n          return p.title === poem.title;\n        });\n        if (!exists) {\n          yield addPoem(poem.title, poem.content, poem.category);\n          console.log(`Added poem: ${poem.title}`);\n        }\n      };\n      for (var _ref5 of Object.entries(poemContent)) {\n        var _ref6 = _slicedToArray(_ref5, 2);\n        var poemKey = _ref6[0];\n        var content = _ref6[1];\n        yield* _loop2();\n      }\n      console.log('Poems loaded successfully!');\n    } catch (error) {\n      console.error('Error loading poems:', error);\n    }\n  });\n  return function loadPoemsFromFiles() {\n    return _ref4.apply(this, arguments);\n  };\n}();\nexport var refreshContentFromFiles = function () {\n  var _ref7 = _asyncToGenerator(function* () {\n    yield loadDiaryFromFiles();\n    yield loadPoemsFromFiles();\n  });\n  return function refreshContentFromFiles() {\n    return _ref7.apply(this, arguments);\n  };\n}();\nexport var getContentInstructions = function getContentInstructions() {\n  return `\n📝 HOW TO ADD NEW CONTENT:\n\n🔹 DIARY ENTRIES:\n1. Create a new file in content/diary/\n2. Name it: YYYY-MM-DD.txt (e.g., 2024-03-15.txt)\n3. First line: Title\n4. Rest: Your diary entry content\n\n🔹 POEMS:\n1. Create a new file in content/poems/\n2. Name it: poem-name.txt (e.g., love-letter.txt)\n3. First line: Poem title\n4. Second line: Category (Love, Beauty, etc.)\n5. Rest: Your poem content\n\n🔹 AFTER ADDING FILES:\n1. Update the imports in src/services/contentLoader.js\n2. Add the new file to diaryFiles or poemFiles object\n3. Restart the app to load new content\n\n🔹 EXAMPLE:\n// In contentLoader.js, add:\nconst diaryFiles = {\n  '2024-01-15': require('../../content/diary/2024-01-15.txt'),\n  '2024-03-15': require('../../content/diary/2024-03-15.txt'), // NEW\n};\n  `;\n};","map":{"version":3,"names":["addDiaryEntry","addPoem","getDiaryEntries","getPoems","diaryContent","poemContent","parseDiaryEntry","content","date","lines","split","title","trim","body","slice","join","parsePoem","category","loadDiaryFromFiles","_ref","_asyncToGenerator","console","log","_loop","entry","dateKey","existingEntries","exists","some","e","_ref2","Object","entries","_ref3","_slicedToArray","error","apply","arguments","loadPoemsFromFiles","_ref4","_loop2","poem","existingPoems","p","_ref5","_ref6","poemKey","refreshContentFromFiles","_ref7","getContentInstructions"],"sources":["C:/study/github/projects/bubu/src/services/contentLoader.js"],"sourcesContent":["// Content Loader Service\r\n// This service loads diary entries and poems from external text files\r\n\r\nimport { addDiaryEntry, addPoem, getDiaryEntries, getPoems } from './database';\r\n\r\n// For React Native, we need to manually import the content files\r\n// In a real app, you could use a file system API or fetch from a server\r\n\r\n// For now, let's use inline content instead of file imports\r\n// This avoids React Native import issues with .txt files\r\n\r\nconst diaryContent = {\r\n  '2024-01-15': `The Day I Met You 💕\r\nToday I want to tell you about the first time I saw you. Your smile lit up the entire room, and I knew in that moment that my life was about to change forever. You were wearing that beautiful dress, and when you laughed, it was like music to my ears. I was so nervous to talk to you, but somehow you made everything feel so natural and easy. That was the beginning of our beautiful story together.`,\r\n  \r\n  '2024-02-14': `Valentine's Day Magic ❤️\r\nToday is our first Valentine's Day together, and I can't believe how lucky I am. Every moment with you feels like a dream come true. The way you look at me, the way you laugh at my silly jokes, the way you make even the simplest moments feel extraordinary. I love how we can talk for hours about everything and nothing. You make my heart skip a beat every single day.`,\r\n};\r\n\r\nconst poemContent = {\r\n  'my-hearts-song': `My Heart's Song\r\nLove\r\nIn your eyes I see the stars,\r\nIn your smile, the morning sun,\r\nEvery moment that we share,\r\nShows me how our hearts are one.\r\n\r\nYour laughter fills the empty spaces,\r\nYour touch heals every scar,\r\nIn this world of endless faces,\r\nYou're my wish upon a star.\r\n\r\nForever yours, forever true,\r\nMy heart beats just for you.`,\r\n\r\n  'beautiful-you': `Beautiful You\r\nBeauty\r\nBeautiful in the morning light,\r\nBeautiful when you sleep at night,\r\nBeautiful when you're laughing loud,\r\nBeautiful in any crowd.\r\n\r\nBeautiful when you're being silly,\r\nBeautiful when the day is chilly,\r\nBeautiful in your favorite dress,\r\nBeautiful in your sweet caress.\r\n\r\nEvery day I fall anew,\r\nFor beautiful, wonderful you.`,\r\n};\r\n\r\n// Parse diary entry from text content\r\nconst parseDiaryEntry = (content, date) => {\r\n  const lines = content.split('\\n');\r\n  const title = lines[0].trim();\r\n  const body = lines.slice(1).join('\\n').trim();\r\n  \r\n  return {\r\n    title,\r\n    content: body,\r\n    date,\r\n  };\r\n};\r\n\r\n// Parse poem from text content\r\nconst parsePoem = (content) => {\r\n  const lines = content.split('\\n');\r\n  const title = lines[0].trim();\r\n  const category = lines[1].trim();\r\n  const body = lines.slice(2).join('\\n').trim();\r\n  \r\n  return {\r\n    title,\r\n    category,\r\n    content: body,\r\n  };\r\n};\r\n\r\n// Load all diary entries from content\r\nexport const loadDiaryFromFiles = async () => {\r\n  try {\r\n    console.log('Loading diary entries from content...');\r\n    \r\n    for (const [dateKey, content] of Object.entries(diaryContent)) {\r\n      const entry = parseDiaryEntry(content, dateKey);\r\n      \r\n      // Check if entry already exists\r\n      const existingEntries = await getDiaryEntries();\r\n      const exists = existingEntries.some(e => e.date === entry.date && e.title === entry.title);\r\n      \r\n      if (!exists) {\r\n        await addDiaryEntry(entry.title, entry.content, entry.date);\r\n        console.log(`Added diary entry: ${entry.title}`);\r\n      }\r\n    }\r\n    \r\n    console.log('Diary entries loaded successfully!');\r\n  } catch (error) {\r\n    console.error('Error loading diary entries:', error);\r\n  }\r\n};\r\n\r\n// Load all poems from content\r\nexport const loadPoemsFromFiles = async () => {\r\n  try {\r\n    console.log('Loading poems from content...');\r\n    \r\n    for (const [poemKey, content] of Object.entries(poemContent)) {\r\n      const poem = parsePoem(content);\r\n      \r\n      // Check if poem already exists\r\n      const existingPoems = await getPoems();\r\n      const exists = existingPoems.some(p => p.title === poem.title);\r\n      \r\n      if (!exists) {\r\n        await addPoem(poem.title, poem.content, poem.category);\r\n        console.log(`Added poem: ${poem.title}`);\r\n      }\r\n    }\r\n    \r\n    console.log('Poems loaded successfully!');\r\n  } catch (error) {\r\n    console.error('Error loading poems:', error);\r\n  }\r\n};\r\n\r\n// Refresh content from files (call this when you add new files)\r\nexport const refreshContentFromFiles = async () => {\r\n  await loadDiaryFromFiles();\r\n  await loadPoemsFromFiles();\r\n};\r\n\r\n// Instructions for adding new content\r\nexport const getContentInstructions = () => {\r\n  return `\r\n📝 HOW TO ADD NEW CONTENT:\r\n\r\n🔹 DIARY ENTRIES:\r\n1. Create a new file in content/diary/\r\n2. Name it: YYYY-MM-DD.txt (e.g., 2024-03-15.txt)\r\n3. First line: Title\r\n4. Rest: Your diary entry content\r\n\r\n🔹 POEMS:\r\n1. Create a new file in content/poems/\r\n2. Name it: poem-name.txt (e.g., love-letter.txt)\r\n3. First line: Poem title\r\n4. Second line: Category (Love, Beauty, etc.)\r\n5. Rest: Your poem content\r\n\r\n🔹 AFTER ADDING FILES:\r\n1. Update the imports in src/services/contentLoader.js\r\n2. Add the new file to diaryFiles or poemFiles object\r\n3. Restart the app to load new content\r\n\r\n🔹 EXAMPLE:\r\n// In contentLoader.js, add:\r\nconst diaryFiles = {\r\n  '2024-01-15': require('../../content/diary/2024-01-15.txt'),\r\n  '2024-03-15': require('../../content/diary/2024-03-15.txt'), // NEW\r\n};\r\n  `;\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}